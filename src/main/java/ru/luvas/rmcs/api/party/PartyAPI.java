package ru.luvas.rmcs.api.party;

import org.bukkit.entity.Player;
import ru.luvas.rmcs.api.player.RMCSPlayer;

/**
 *
 * @author 0xC0deBabe
 */
public interface PartyAPI {

    /**
     * Метод, возвращающий объект группы для указанного игрока.
     * Все содержимое возвращаемого объекта неизменно и не затрагивается никакими обновлениями, посему запрашиваемый
     * объект содержит валидную информацию только на момент вызова, и для проверки любых обновлений необходимо
     * заново использовать данный метод.
     * @param player ник игрока.
     * @return объект группы игрока, если он состоит в группе, иначе null.
     */
    Party getParty(String player);

    /**
     * Метод, возвращающий объект группы для указанного игрока.
     * Все содержимое возвращаемого объекта неизменно и не затрагивается никакими обновлениями, посему запрашиваемый
     * объект содержит валидную информацию только на момент вызова, и для проверки любых обновлений необходимо
     * заново использовать данный метод.
     * @param player bukkit-экземпляр игрока.
     * @return объект группы игрока, если он состоит в группе, иначе null.
     */
    default Party getParty(Player player) {
        return getParty(player.getName());
    }

    /**
     * Метод, возвращающий объект группы для указанного игрока.
     * Все содержимое возвращаемого объекта неизменно и не затрагивается никакими обновлениями, посему запрашиваемый
     * объект содержит валидную информацию только на момент вызова, и для проверки любых обновлений необходимо
     * заново использовать данный метод.
     * @param player rmcs-экземпляр игрока.
     * @return объект группы игрока, если он состоит в группе, иначе null.
     */
    default Party getParty(RMCSPlayer player) {
        return getParty(player.getName());
    }
    
}
